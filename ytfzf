#!/bin/sh

# DEFAULTS
title_len=55                           # Display length for title and channel name
channel_len=28
prompt_loop=0                          # to prompt again after video finishes
save_history=0                         # 0: history off, 1: history on
cache_dir=~/.cache/ytfzf
history_file="$cache_dir"/ytfzf_hst
preferred_format=""                    # ytdl-format (deafults to auto if format not found)"
show_format="0"                        # 1: shows all formats before proceeding
player="mpv"
player_format="mpv --ytdl-format="
FZF_DEFAULT_OPTS=""                    # reset fzf defaults
[ -d $cache_dir ] || mkdir -p $cache_dir

# ADJUST SIZE
## min length
dur_len=7
view_len=10
date_len=14
url_len=12

t_size="$(stty size | cut -f2 -d' ')"
if [ $t_size -lt 75 ]; then  # title channel
	frac=$(((t_size - 1)/4))
	title_len=$((frac * 3))
	channel_len=$((frac * 1 + 7))
elif [ $t_size -lt 95 ]; then # title channel time
	frac=$(((t_size - 4)/8))
	title_len=$((frac * 5 - 1))
	channel_len=$((frac * 2 - 1))
	dur_len=$((frac * 1 + 10))
elif [ $t_size -lt 110 ]; then # title channel time views
	frac=$(((t_size - 1)/9))
	title_len=$((frac * 5 ))
	channel_len=$((frac * 2 ))
	dur_len=$((frac * 1))
	view_len=$((frac * 1 + 7))
elif [ $t_size -lt 130 ]; then # title channel time views date
	frac=$(((t_size - 5)/11))
	title_len=$((frac * 5 - 1))
	channel_len=$((frac * 2))
	dur_len=$((frac * 1))
	view_len=$((frac * 1))
	date_len=$((frac * 2 + 20))
else # all
	frac=$(((t_size - 5 - 12)/11))
	title_len=$((frac * 5 - 1))
	channel_len=$((frac * 2))
	dur_len=$((frac * 1))
	view_len=$((frac * 1))
	date_len=$((frac * 2 ))
fi


# HELPER TEXT
errinfo () { 
printf "Check for new versions and report at: https://github.com/pystardust/ytfzf\n"
}
helpinfo () {
printf "Usage: %bytfzf %b<search query>%b\n" "\033[1;32m" "\033[1;33m" "\033[0m";
printf "     -h                    Show this help text\n"; 
printf "     -H                    Choose from history \n";
printf "     -D                    Delete history\n";
printf "     -m  <search query>    Audio only (for listening to music)\n"; 
printf "     -d  <search query>    Download to current directory\n"; 
printf "     -f  <search query>    Show available formats before proceeding\n";
printf "     -a  <search query>    Auto play the first result, no fzf\n";
printf "     -l  <search query>    loop: prompt again after video ends\n";
}
format_awk () {
	awk -F'\t' \
	-v A=$title_len -v B=$channel_len -v C=$dur_len -v D=$view_len -v E=$date_len -v F=$url_len \
	'{ printf "%-"A"."A"s\t%-"B"."B"s\t%-"C"."C"s\t%-"D"."D"s\t%-"E"."E"s\t%-"F"."F"s\n",$1,$2,$4,$3,$5,$6}'  
}
menu_fzf () {
	format_awk | fzf --tabstop=1 --delimiter="$(printf "\t")" --nth=1,2
}

# Opt variables
main=0
auto_select=0
# DEP CHECK
dep_ck () {
	command -v "$1" 1>/dev/null || { printf "$1 not found. Please install it.\n" ; exit 2; }
}
dep_ck "jq"; dep_ck "youtube-dl"; dep_ck "mpv"; dep_ck "fzf"

# OPT
while getopts "hmdfDHal" opt; do
	case ${opt} in
		h) 	helpinfo
			exit;
			;;
		m) 	preferred_format="bestaudio"
			;;
		d) 	player="youtube-dl"
		   	player_format="youtube-dl -f "
			;;
		f) 	show_format="1"
			;;
		H) 	
			if [ $save_history -eq 1 ]; then
				[ -e "$history_file" ] || touch "$history_file" 
				hist_data="$(tac "$history_file")"
				[ -z "$hist_data" ] && printf "History is empty!\n" && exit;
				videos_data="$(echo "$hist_data" | uniq )"
				main=1
			else
				printf "History is not enabled. Please enable it to use this option -H.\n";
			fi
			;;
		D)	
			[ -e "$history_file" ] && rm "$history_file" && touch "$history_file" && printf "History has been cleared\n"
			exit;
			;;
		a) 	auto_select=1
			;;
		l) 	prompt_loop=1
			;;
		*)
			printf "Option not found!\n"
			helpinfo 
			exit 2;
			;;
	esac
done
shift $((OPTIND-1)) 

# MAIN
[ $main -eq 0 ] && {
	[ -z "$*" ] && { helpinfo ; exit 1; }

	## GETTING DATA
	yt_html="$( 
	useragent='user-agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.152 Safari/537.36'

	curl 'https://www.youtube.com/results' -s \
	  -G --data-urlencode "search_query=$*" \
	  -H 'authority: www.youtube.com' \
	  -H "$useragent" \
	  -H 'accept-language: en-US,en;q=0.9' \
	  --compressed
	)"
	[ -z "$yt_html" ] &&  { 
		printf "ERROR[#01]: Couldn't curl website. Please check your network and try again.\n"; 
		errinfo; exit 2; }

	yt_json="$(printf "%s" "$yt_html" |sed -n '/var *ytInitialData/,$p' | tr -d '\n' |\
		sed -E ':a s_^.*var ytInitialData ?=__ ; s_;</script>.*__ ;' 
	 )"
	[ -z "$yt_json" ] &&  { 
		printf "ERROR[#02]: Couldn't find data on site.\n";
		errinfo ; exit 2; }

	videos_data="$(printf "%s" "$yt_json" | jq '..|.videoRenderer?' | sed '/^null$/d' |\
		jq  '.title.runs[0].text,.longBylineText.runs[0].text,.shortViewCountText.simpleText,.lengthText.simpleText,.publishedTimeText.simpleText,.videoId' |\
		sed 's/^"//;s/"$//;s/\\"//g' | sed -E -n ";N;N;N;N;N;s/\n/\t\|/g;p" 
		)"
	[ -z "$videos_data" ] &&  { printf "No results found. Try different keywords.\n"; errinfo ; exit 1;}

} #MAIN END

## USER SELECTION
user_selection () {
	if [ $auto_select -eq 0 ] ; then 
		selected_data="$(echo "$videos_data" | menu_fzf )"
	else
		selected_data="$(echo "$videos_data" | sed 1q )" ;
	fi

	url="$(echo "$selected_data" | sed -E 's_.*\|([^|]+) *$_https://www.youtube.com/watch?v=\1_')"
	# to get back untruncated data
	selected_data="$(echo "$videos_data" | grep "$(echo "$selected_data" | cut -f6)" )"
	[ -z "$url" ] && exit;
	# selecte format if flag given
	[ $show_format -eq 1 ] && {
		preferred_format="$(youtube-dl -F "$url" | sed '1,3d' | tac - | fzf | sed -E 's/^([^ ]*) .*/\1/')"
	}
}
play_url () {

	[ -n "$preferred_format" ] && {
		eval "$player_format""$preferred_format"  "$url" 
	} || { 
		eval "$player" "$url"
	} || { 
		printf "ERROR[#03]: Couldn't play the video/audio using the current player.\n\tTry updating youtube-dl\n"; errinfo ; ; exit 2; 
	}
}

main() {
	while true; do
		user_selection
		play_url
		[ $prompt_loop -eq 0 ] && exit;
	done
}

main
